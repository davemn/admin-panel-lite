!!!
%html
  %head
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="">
    <meta name="author" content="">
    <link rel="shortcut icon" href="img/favicon.png">

    %title Document Upload

    <!-- Bootstrap core CSS + customizations -->
    <link rel="stylesheet" type="text/css" href="index.css">
    <link rel="stylesheet" type="text/css" href="bower_components/datatables-plugins/integration/bootstrap/3/dataTables.bootstrap.css">
    <link rel="stylesheet" type="text/css" href="bower_components/selectize/dist/css/selectize.bootstrap3.css">

    <!-- HTML5 shim and Respond.js IE8 support of HTML5 elements and media queries -->
    <!--[if lt IE 9]>
    <script src="bower_components/html5shiv/dist/html5shiv.js"></script>
    <script src="bower_components/respond/dest/respond.min.js"></script>
    <![endif]-->
  %body
    %section
      .container
        .row
          %div
            / Nav tabs
            %ul.nav.nav-tabs(role="tablist")
              %li.active(role="presentation")
                %a(href="#tab-history" aria-controls="history" role="tab" data-toggle="tab") 
                  %i.fa.fa-history 
                  History
              %li(role="presentation")
                %a(href="#tab-add" aria-controls="add" role="tab" data-toggle="tab") 
                  %i.fa.fa-plus
                  Add
              %li(role="presentation")
                %a(href="#tab-delete" aria-controls="delete" role="tab" data-toggle="tab") 
                  %i.fa.fa-trash-o
                  Delete
              %li(role="presentation")
                %a(href="#tab-replace" aria-controls="replace" role="tab" data-toggle="tab")
                  %i.fa.fa-refresh
                  Replace
            / Tab panes
            .tab-content
              .tab-pane.active#tab-history(role="tabpanel")
                %h1 Recent History
                .panel.panel-default
                  %ul.list-group
                    %li.list-group-item
                      %h1
                        <i class="fa fa-stack-overflow"></i> - Added
                      %p.text-center When you use the document upload form, this area will show each document you've added. 
                      %p.text-center You'll only see what you've added this session - reloading the page will clear this list.
                      .list-group#list-group-added
                    %li.list-group-item
                      %h1
                        <i class="fa fa-trash-o"></i> - Deleted
                      %p.text-center When you select and delete a document, this area will show each document you've deleted. 
                      %p.text-center You'll only see what you've deleted this session - reloading the page will clear this list.
                      .list-group#list-group-deleted 
              .tab-pane#tab-add(role="tabpanel")
                %h1 Add a Document
                %form#form-request
                  .form-group
                    %label Title
                    %input.form-control(name="title")
                  .form-group
                    %label Division
                    %select.form-control(name="division" placeholder="{{division.placeholder}}...")
                      <option value=''>{{division.placeholder}}...</option>
                      {{#each division.options}}
                      <option value="{{[0]}}">{{[1]}}</option>
                      {{/each}}
                  .form-group
                    %label File Type
                    %select.form-control(name="file-type" placeholder="{{[file-type].placeholder}}...")
                      <option value=''>{{[file-type].placeholder}}...</option>
                      {{#each [file-type].options}}
                      <option value="{{[0]}}">{{[1]}}</option>
                      {{/each}}
                  .form-group
                    %label Business Area
                    %select.form-control(name="business-area" placeholder="{{[business-area].placeholder}}...")
                      <option value=''>{{[business-area].placeholder}}...</option>
                      {{#each [business-area].options}}
                      <option value="{{[0]}}">{{[1]}}</option>
                      {{/each}}
                  .form-group
                    %label Category
                    %select.form-control(name="category" placeholder="{{category.placeholder}}...")
                      <option value=''>{{category.placeholder}}...</option>
                      {{#each category.options}}
                      <option value="{{[0]}}">{{[1]}}</option>
                      {{/each}}
                  .form-group
                    %label Subject
                    %select.form-control(name="subject" placeholder="{{subject.placeholder}}...")
                      <option value=''>{{subject.placeholder}}...</option>
                      {{#each subject.options}}
                      <option value="{{[0]}}">{{[1]}}</option>
                      {{/each}}
                  .form-group.has-error
                    %label Select File
                    %input(type="file" name="attachment")
                    %p.help-block.hidden#help-attachment Something went wrong!
                  %button.btn.btn-center.btn-primary(type="submit") Add
                  %p.help-block.text-center Uploads the given attachment, and saves the file described above.
              .tab-pane#tab-delete(role="tabpanel")
                %h1 Delete a Document
                <table cellspacing='0' class='table table-striped table-bordered' id='table-all' width='100%'></table>
                %button.btn.btn-center.btn-primary#button-delete(type="submit") Delete
                %p.help-block.text-center Deletes the selected document.
                %p.help-block.hidden#help-remove Something went wrong!
              .tab-pane#tab-replace(role="tabpanel")
                %h1 Replace a Document
                <table cellspacing='0' class='table table-striped table-bordered' id='table-replace' width='100%'></table>
                %button.btn.btn-center.btn-primary#button-select(type="submit") Select to Edit
                %p.help-block.text-center Selects a document to replace.
                %form#form-replace
                  .form-group
                    %label Title
                    %input.form-control(name="title")
                  .form-group
                    %label Division
                    %select.form-control(name="division" placeholder="{{division.placeholder}}...")
                      <option value=''>{{division.placeholder}}...</option>
                      {{#each division.options}}
                      <option value="{{[0]}}">{{[1]}}</option>
                      {{/each}}
                  .form-group
                    %label File Type
                    %select.form-control(name="file-type" placeholder="{{[file-type].placeholder}}...")
                      <option value=''>{{[file-type].placeholder}}...</option>
                      {{#each [file-type].options}}
                      <option value="{{[0]}}">{{[1]}}</option>
                      {{/each}}
                  .form-group
                    %label Business Area
                    %select.form-control(name="business-area" placeholder="{{[business-area].placeholder}}...")
                      <option value=''>{{[business-area].placeholder}}...</option>
                      {{#each [business-area].options}}
                      <option value="{{[0]}}">{{[1]}}</option>
                      {{/each}}
                  .form-group
                    %label Category
                    %select.form-control(name="category" placeholder="{{category.placeholder}}...")
                      <option value=''>{{category.placeholder}}...</option>
                      {{#each category.options}}
                      <option value="{{[0]}}">{{[1]}}</option>
                      {{/each}}
                  .form-group
                    %label Subject
                    %select.form-control(name="subject" placeholder="{{subject.placeholder}}...")
                      <option value=''>{{subject.placeholder}}...</option>
                      {{#each subject.options}}
                      <option value="{{[0]}}">{{[1]}}</option>
                      {{/each}}
                  .form-group.has-error
                    %label Select File
                    %input(type="file" name="attachment")
                    %p.help-block.hidden#help-replace Something went wrong!
                  .text-center
                    %button.btn.btn-default#button-replace-cancel(disabled) Cancel
                    %button.btn.btn-primary#button-replace(type="submit" disabled) Replace
                  %p.help-block.text-center Replaces the selected document.
    / Placed at the end of the document so the pages load faster
    <script type="text/javascript" src="bower_components/jquery/dist/jquery.js"></script>
    <script type="text/javascript" src="bower_components/underscore/underscore-min.js"></script>
        
    <script type="text/javascript" src="bower_components/backbone/backbone-min.js"></script>
    <script type="text/javascript" src="bower_components/bootstrap/dist/js/bootstrap.min.js"></script>
    
    <script type="text/javascript" src="bower_components/datatables/media/js/jquery.dataTables.js"></script>
    <script type="text/javascript" src="bower_components/datatables-plugins/integration/bootstrap/3/dataTables.bootstrap.js"></script>
    
    <script type="text/javascript" src="bower_components/selectize/dist/js/standalone/selectize.min.js"></script>
    :javascript
      $(window).load(function() {

      });
      
      // Backbone.Collection.prototype.close = function(){
      //   this.off();
      //   this.stopListening();
      //   if(this.onClose){
      //     this.onClose();
      //   }
      // }
      // 
      // Backbone.View.prototype.close = function(){
      //   this.off();
      //   this.stopListening();
      //   this.undelegateEvents();
      //   if(this.onClose){
      //     this.onClose();
      //   }
      // }
      
      var EventQueue = _.clone(Backbone.Events);
      
      // ===
      
      var FormReplace = function(formSelector){
        _.extend(this, Backbone.Events);
        
        this.record = null;
        
        this.$formElem = $(formSelector);
        this.selCtl = [];
                
        var $division = this.$formElem.find('select[name="division"]').selectize({
          sortField: 'text'
        });
        var $fileType = this.$formElem.find('select[name="file-type"]').selectize({
          sortField: 'text'
        });
        var $bizArea = this.$formElem.find('select[name="business-area"]').selectize({
          create: true
        });
        var $categ = this.$formElem.find('select[name="category"]').selectize({
          create: true
        });
        var $subject = this.$formElem.find('select[name="subject"]').selectize({
          create: true
        });
        
        this.selCtl.push($division.get(0).selectize);
        this.selCtl.push($fileType.get(0).selectize);
        this.selCtl.push($bizArea.get(0).selectize);
        this.selCtl.push($categ.get(0).selectize);
        this.selCtl.push($subject.get(0).selectize);
        
        this.$formElem.submit(FormReplace.prototype.onSubmit.bind(this)); // have to bind, otherwise jQuery takes over our 'this'
        this.$formElem.find('button#button-replace-cancel').click(FormReplace.prototype.onCancel.bind(this));
        
        this.listenTo(EventQueue, 'user:select', FormReplace.prototype.enableSubmit);
        this.listenTo(EventQueue, 'user:select', FormReplace.prototype.selected);
        this.listenTo(EventQueue, 'user:select-cancel', FormReplace.prototype.clear);
        this.listenTo(EventQueue, 'storage:replace', FormReplace.prototype.clear);
        
        this.listenTo(EventQueue, 'error:replace', FormReplace.prototype.error);
      };
      FormReplace.prototype.clear = function(record){
        this.record = null;
        
        // Clear value of plain form elements
        this.$formElem.find('input[name="title"]').val('');
        
        // Clear value of "selectized" form elements
        for(var i=0; i < this.selCtl.length; i++){ // ctl is a Selectize API instance
          this.selCtl[i].clear(true);
        }
        
        // Clear selected attachment
        var $fileInput = this.$formElem.find('input[name="attachment"]');
        $fileInput.replaceWith($fileInput.val('').clone(true));
        
        // Disable form buttons (submit and cancel)
        this.$formElem.find('button').prop('disabled', true);
        
        // Clear out error messages
        this.$formElem.find('.help-block#help-replace').addClass('hidden');
        this.$formElem.find('.help-block#help-replace').text('');
      };
      FormReplace.prototype.selected = function(record){
        this.record = record.slice(0); // clone the new record
        
        // Populate value of plain form elements
        this.$formElem.find('input[name="title"]').val(record[1]);
        
        // Populate value of "selectized" form elements
        for(var i=0; i < this.selCtl.length; i++){ // ctl is a Selectize API instance
          this.selCtl[i].setValue(record[i+2], true);  
        }
        
        // Clear selected attachment, if any
        var $fileInput = this.$formElem.find('input[name="attachment"]');
        $fileInput.replaceWith($fileInput.val('').clone(true));
      };
      FormReplace.prototype.onCancel = function(evt){
        evt.preventDefault();        
        EventQueue.trigger('user:select-cancel');
      };
      FormReplace.prototype.onSubmit = function(evt){
        evt.preventDefault();
        
        if(this.record === null)
          return;
        
        // Get the file attachment, if any
        var attachments = this.$formElem.find('input[name="attachment"]').get(0).files;
        var attachment = null;
        if(attachments.length !== 0)
          attachment = attachments[0];
        
        // Get the form fields, and format into a record
        var form = {};
        var formVals = this.$formElem.serializeArray();
        
        var hasEmptyFields = false;
        formVals.forEach(function(formVal){
          form[formVal.name] = formVal.value;
          hasEmptyFields |= (formVal.value.length === 0);
        });
        
        if(hasEmptyFields){
          EventQueue.trigger('error:replace', 'One or more fields is empty');
          return;
        }
                
        var record = [form.title, form.division, form['file-type'], form['business-area'], form.category, form.subject];
        
        // Disable all form buttons until we hear back from server, to prevent double-clicking
        this.$formElem.find('button').prop('disabled', true);
        
        // Upload a new file, if specified, in addition to replacing record fields
        if(attachment === null)
          EventQueue.trigger('user:replace', this.record, record);
        else
          EventQueue.trigger('user:replace', this.record, record, attachment);
      };
      FormReplace.prototype.enableSubmit = function(){ // enable submit after selection
        this.$formElem.find('button').prop('disabled', false);
      };
      FormReplace.prototype.error = function(errorMsg){
        this.$formElem.find('.help-block#help-replace').removeClass('hidden');
        this.$formElem.find('.help-block#help-replace').text(errorMsg);
      };
      
      // ===
      
      var TableReplace = function(tableSelector, selBtnSelector){
        _.extend(this, Backbone.Events);
        
        this.$table = $(tableSelector);
        this.dtApi = this.$table.DataTable({
          "autoWidth": false,
          "processing": true,
          "ajax": "data/index.json",
          "columns": [
            { "title": "ID",            "width": "0%" },
            { "title": "Title",         "width": "43%" },
            { "title": "Division",      "width": "4%" },
            { "title": "File Type",     "width": "20%" },
            { "title": "Business Area", "width": "22%" },
            { "title": "Category",      "width": "0%" },
            { "title": "Subject",       "width": "11%" }
          ],
          "order": [
            [2, "asc"]
          ],
          "columnDefs": [
            {
              "visible": false, 
              "searchable": false,
              "orderable": false,
              "targets": [0] // can't see or search by ID
            },
            { "visible": false, "targets": [5] }, // can't see category
            {
              "render": function(data, type, row){
                return `
                  <div class="radio">
                    <label>
                      <input type="radio" name="table-view-radio">
                      <a href="http://mydmv/documents?id=${row[0]}">${data}</a>
                    </label>
                  </div>`;
              },
              "targets": 1
            },
            {
              "render": function(data, type, row){
                if(data.toLowerCase() === "word")
                  return '<i class="fa fa-file-word-o"></i> ' + data;  
                else if (data.toLowerCase() === "pdf")
                  return '<i class="fa fa-file-pdf-o"></i> ' + data;
                else if (data.toLowerCase() === "excel")
                  return '<i class="fa fa-file-excel-o"></i> ' + data;
                else if (data.toLowerCase() === "powerpoint")
                  return '<i class="fa fa-file-powerpoint-o"></i> ' + data;
                else if (data.toLowerCase() === "video")
                  return '<i class="fa fa-file-video-o"></i> ' + data;
                else
                  return '<i class="fa fa-file-o"></i> ' + data;
              },
              "targets": 3
            },
            {
              "render": function(data, type, row){
                if(row[5] === '-')
                  return data;
                else
                  return data + ' (' + row[5] + ')';
              },
              "targets": 4
            }
          ]
        });
        
        this.$selBtn = $(selBtnSelector);
        this.$selBtn.click(TableReplace.prototype.onSelect.bind(this));
        
        this.listenTo(EventQueue, 'storage:add', TableReplace.prototype.added);
        this.listenTo(EventQueue, 'storage:remove', TableReplace.prototype.removed);
        this.listenTo(EventQueue, 'storage:replace', TableReplace.prototype.replaced);
        
        // re-enable the select button if the update succeeded, or the user cancelled
        this.listenTo(EventQueue, 'storage:replace user:select-cancel', TableReplace.prototype.canSelect);
      };
      TableReplace.prototype.added = function(record){
        this.dtApi.row.add(record);
        this.dtApi.draw();
      };
      TableReplace.prototype.removed = function(record){
        
        // Select the row whose data matches the record
        var sel = this.dtApi.row(function(i,data,node){
          var match = true;
          for(var i=0; i < record.length; i++){
            match = match && (record[i] === data[i]);
          }
          return match;
        })
        
        if(sel.length === 0)
          console.log('Failed to remove row from table!');
        else
          sel.remove();
        
        // Redraw the table now that we've removed the selected row
        this.dtApi.draw();
      };
      TableReplace.prototype.replaced = function(oldRecord, newRecord){
        
        // Select the row whose data matches the old record
        var sel = this.dtApi.row(function(i,data,node){          
          for(var i=0; i < oldRecord.length; i++){
            if(oldRecord[i] !== data[i])
              return false;
          }
          return true;
        });
        
        if(sel.length === 0){
          console.log('TODO error handling: could not find old record to replace.');
          return;
        }
        
        sel.data(newRecord); // update the row
        
        // Redraw the table now that we've updated the selected row
        this.dtApi.draw();
      };
      TableReplace.prototype.onSelect = function(evt){
        evt.preventDefault();
        
        // Disable submit button until changes are made, or cancelled
        this.$selBtn.prop('disabled', true);
        
        var selIdx = -1;
        this.$table.find('tbody > tr').each(function(i){
          if($(this).find('input[type="radio"]:checked').length !== 0){
            selIdx = i;
            return false; // stop iterating
          }
        });
        
        if(selIdx === -1){ // nothing was selected, to reenable our select button
          this.canSelect();
          return;
        }
        
        var sel = this.$table.find('tbody > tr').get(selIdx);
        
        var record = this.dtApi.row(sel).data();
        EventQueue.trigger('user:select', record);
      };
      TableReplace.prototype.canSelect = function(){
        this.$selBtn.prop('disabled', false);
      };
            
      // ===
      
      var TableView = function(tableSelector, delBtnSelector){
        _.extend(this, Backbone.Events);
        
        this.$table = $(tableSelector);
        this.dtApi = this.$table.DataTable({
          "autoWidth": false,
          "processing": true,
          "ajax": "data/index.json",
          "columns": [
            { "title": "ID",            "width": "0%" },
            { "title": "Title",         "width": "43%" },
            { "title": "Division",      "width": "4%" },
            { "title": "File Type",     "width": "20%" },
            { "title": "Business Area", "width": "22%" },
            { "title": "Category",      "width": "0%" },
            { "title": "Subject",       "width": "11%" }
          ],
          "order": [
            [2, "asc"]
          ],
          "columnDefs": [
            {
              "visible": false, 
              "searchable": false,
              "orderable": false,
              "targets": [0] // can't see or search by ID
            },
            { "visible": false, "targets": [5] }, // can't see category
            {
              "render": function(data, type, row){
                return `
                  <div class="radio">
                    <label>
                      <input type="radio" name="table-view-radio">
                      <a href="http://mydmv/documents?id=${row[0]}">${data}</a>
                    </label>
                  </div>`;
              },
              "targets": 1
            },
            {
              "render": function(data, type, row){
                if(data.toLowerCase() === "word")
                  return '<i class="fa fa-file-word-o"></i> ' + data;  
                else if (data.toLowerCase() === "pdf")
                  return '<i class="fa fa-file-pdf-o"></i> ' + data;
                else if (data.toLowerCase() === "excel")
                  return '<i class="fa fa-file-excel-o"></i> ' + data;
                else if (data.toLowerCase() === "powerpoint")
                  return '<i class="fa fa-file-powerpoint-o"></i> ' + data;
                else if (data.toLowerCase() === "video")
                  return '<i class="fa fa-file-video-o"></i> ' + data;
                else
                  return '<i class="fa fa-file-o"></i> ' + data;
              },
              "targets": 3
            },
            {
              "render": function(data, type, row){
                if(row[5] === '-')
                  return data;
                else
                  return data + ' (' + row[5] + ')';
              },
              "targets": 4
            }
          ]
        });
        
        this.$delBtn = $(delBtnSelector);
        this.$delBtn.click(TableView.prototype.onSubmit.bind(this));
        
        this.listenTo(EventQueue, 'storage:add', TableView.prototype.added);
        this.listenTo(EventQueue, 'storage:remove', TableView.prototype.removed);
        this.listenTo(EventQueue, 'storage:replace', TableReplace.prototype.replaced);
        
        this.listenTo(EventQueue, 'error:remove', TableView.prototype.error);
      };
      TableView.prototype.added = function(record){
        this.dtApi.row.add(record);
        this.dtApi.draw();
      };
      TableView.prototype.removed = function(record){
        // Select the row whose data matches the deleted record
        var sel = this.dtApi.row(function(i,data,node){          
          for(var i=0; i < record.length; i++){
            if(record[i] !== data[i])
              return false;
          }
          return true;
        });
        
        if(sel.length === 0){
          EventQueue.trigger('error:remove', 'Unable to find deleted record!');
          return;
        }
        
        sel.remove();
        
        // Redraw the table now that we've removed the selected row
        this.dtApi.draw();
        
        // If record successfully removed, clear out error messages
        $('.help-block#help-remove').addClass('hidden');
        $('.help-block#help-remove').text('');
      };
      TableView.prototype.replaced = function(oldRecord, newRecord){
        
        // Select the row whose data matches the old record
        var sel = this.dtApi.row(function(i,data,node){          
          for(var i=0; i < oldRecord.length; i++){
            if(oldRecord[i] !== data[i])
              return false;
          }
          return true;
        });
        
        if(sel.length === 0){
          console.log('TODO error handling: could not find old record to replace.');
          return;
        }
        
        sel.data(newRecord); // update the row
        
        // Redraw the table now that we've updated the selected row
        this.dtApi.draw();
      };
      TableView.prototype.onSubmit = function(evt){
        evt.preventDefault();
        
        // Disable submit button for N milliseconds, to prevent double-clicking
        this.$delBtn.prop('disabled', true);
        window.setTimeout(TableView.prototype.enableSubmit.bind(this), 1000);
        
        var selIdx = -1;
        this.$table.find('tbody > tr').each(function(i){
          if($(this).find('input[type="radio"]:checked').length !== 0){
            selIdx = i;
            return false; // stop iterating
          }
        });
        
        var sel = this.$table.find('tbody > tr').get(selIdx);
        
        var record = this.dtApi.row(sel).data();
        EventQueue.trigger('user:remove', record);
      };
      TableView.prototype.enableSubmit = function(){
        this.$delBtn.prop('disabled', false);
      };
      TableView.prototype.error = function(errorMsg){
        this.$table.siblings('.help-block#help-remove').removeClass('hidden');
        this.$table.siblings('.help-block#help-remove').text(errorMsg);
      };
      
      // ===
      
      var Storage = function(){
        _.extend(this, Backbone.Events);
        this.listenTo(EventQueue, 'user:add', Storage.prototype.addBlob);
        this.listenTo(EventQueue, 'user:remove', Storage.prototype.remove);
        this.listenTo(EventQueue, 'user:replace', Storage.prototype.replaceBlob);
      }
      Storage.prototype.addBlob = function(record, attachment){
        console.log('Uploading file ...');
        
        var form = new FormData();
        form.append("attachment", attachment);
        
        var outerThis = this;
        
        $.ajax({
          type: "POST",
          url: 'save-attachment.php',
          processData: false,
          contentType: false, // note, this is a multipart form request. 
          data: form
        })
        .done(function(data, status, resp){
          console.log('Upload success!');
          
          var hashed = $.parseJSON(resp.responseText);
          console.log(hashed);
          
          // Add the newly calculated file hash to the front of the record
          record.unshift(hashed.id);
          outerThis.addArray(record);
        })
        .fail(function(resp){
          console.log("File upload operation failed!");

          var errObj = $.parseJSON(resp.responseText);
          EventQueue.trigger('error:add', errObj.error);
        });
      };
      /**
       * Persists the form fields to the JSON file on the server.
       */
      Storage.prototype.addArray = function(record){
        console.log('Adding to JSON ...');
        
        $.ajax({
          type: "POST",
          url: 'save.php',
          processData: false,
          contentType: 'application/json',
          data: JSON.stringify(record)
        })
        .done(function(data, status, resp){
          console.log('JSON add success!');
          EventQueue.trigger('storage:add', record);
        })
        .fail(function(resp){
          console.log("JSON add operation failed!");
          var errObj = $.parseJSON(resp.responseText);
          
          EventQueue.trigger('error:add', errObj.error);
        });
      };
      Storage.prototype.remove = function(record){
        console.log('Removing from JSON ...');
        
        $.ajax({
          type: "DELETE",
          url: 'delete.php',
          processData: false,
          contentType: 'application/json',
          data: JSON.stringify(record)
        })
        .done(function(data, status, resp){
          console.log('JSON remove success!');
          EventQueue.trigger('storage:remove', record);
        })
        .fail(function(resp){
          console.log("JSON remove operation failed!");
          var errObj = $.parseJSON(resp.responseText);
          
          EventQueue.trigger('error:remove', errObj.error);
        });
      };
      Storage.prototype.replaceBlob = function(oldRecord, newRecord, attachment){
        if(typeof attachment === 'undefined'){
          newRecord.unshift(oldRecord[0]); // file ID did not change, so copy old to new
          this.replaceArray(oldRecord, newRecord);
          return;
        }
        
        console.log('Uploading file ...');
        
        var form = new FormData();
        form.append("attachment", attachment);
        
        var outerThis = this;
        
        $.ajax({
          type: "POST",
          url: 'save-attachment.php',
          processData: false,
          contentType: false, // note, this is a multipart form request. 
          data: form
        })
        .done(function(data, status, resp){
          console.log('Upload success!');
          
          var hashed = $.parseJSON(resp.responseText);
          console.log(hashed);
          
          // Add the newly calculated file hash to the front of the new record
          newRecord.unshift(hashed.id);
          outerThis.replaceArray(oldRecord, newRecord);
        })
        .fail(function(resp){
          console.log("File upload operation failed!");

          var errObj = $.parseJSON(resp.responseText);
          EventQueue.trigger('error:replace', errObj.error);
        });
      };
      Storage.prototype.replaceArray = function(oldRecord, newRecord){        
        console.log('Replacing entry in JSON ...');
        
        $.ajax({
          type: "PUT",
          url: 'replace.php',
          processData: false,
          contentType: 'application/json',
          data: JSON.stringify([oldRecord, newRecord])
        })
        .done(function(data, status, resp){
          console.log('JSON replace success!');
          
          EventQueue.trigger('storage:replace', oldRecord, newRecord); // send old and new records
        })
        .fail(function(resp){
          console.log("JSON replace operation failed!");
          var errObj = $.parseJSON(resp.responseText);
          
          EventQueue.trigger('error:replace', errObj.error);
        });
      };
      
      // ===

      var EditForm = function(formSelector){
        _.extend(this, Backbone.Events);
        
        this.$formElem = $(formSelector);
        this.formElem = this.$formElem.get(0);
                
        this.$formElem.find('select[name="division"]').selectize({
          sortField: 'text'
        });
        this.$formElem.find('select[name="file-type"]').selectize({
          sortField: 'text'
        });
        this.$formElem.find('select[name="business-area"]').selectize({
          create: true
        });
        this.$formElem.find('select[name="category"]').selectize({
          create: true
        });
        this.$formElem.find('select[name="subject"]').selectize({
          create: true
        });
        
        this.$formElem.submit(EditForm.prototype.onSubmit.bind(this)); // have to bind, otherwise jQuery takes over our 'this'
        
        this.listenTo(EventQueue, 'storage:add', EditForm.prototype.saved);
        this.listenTo(EventQueue, 'error:add', EditForm.prototype.error);
      };
      EditForm.prototype.onSubmit = function(evt){
        evt.preventDefault();
        
        // Disable submit button for N milliseconds, to prevent double-clicking
        this.$formElem.find('button[type="submit"]').prop('disabled', true);
        window.setTimeout(EditForm.prototype.canSubmit.bind(this), 1000);
        
        // Get the file attachment, if any
        var attachments = this.$formElem.find('input[name="attachment"]').get(0).files;
        if(attachments.length === 0){
          EventQueue.trigger('error:add', 'No attachment specified');
          return;
        }
        var attachment = attachments[0];
        
        // Get the form fields, and format into a record
        var form = {};
        var formVals = this.$formElem.serializeArray();
        
        var hasEmptyFields = false;
        formVals.forEach(function(formVal){
          form[formVal.name] = formVal.value;
          hasEmptyFields |= (formVal.value.length === 0);
        });
        
        if(hasEmptyFields){
          EventQueue.trigger('error:add', 'One or more fields is empty');
          return;
        }
        
        var record = [form.title, form.division, form['file-type'], form['business-area'], form.category, form.subject];
        
        EventQueue.trigger('user:add', record, attachment);
      };
      EditForm.prototype.canSubmit = function(){
        this.$formElem.find('button[type="submit"]').prop('disabled', false);
      };
      EditForm.prototype.saved = function(){
        // If form successfully saved, clear out error messages
        this.$formElem.find('.help-block#help-attachment').addClass('hidden');
        this.$formElem.find('.help-block#help-attachment').text('');
      };
      EditForm.prototype.error = function(errorMsg){
        this.$formElem.find('.help-block#help-attachment').removeClass('hidden');
        this.$formElem.find('.help-block#help-attachment').text(errorMsg);
      };
      
      // ===
      
      var EditHistory = function(addListSelector, delListSelector){
        _.extend(this, Backbone.Events);
        
        this.$addList = $(addListSelector);
        this.$delList = $(delListSelector);
        
        this.listenTo(EventQueue, 'storage:add', EditHistory.prototype.add);
        this.listenTo(EventQueue, 'storage:remove', EditHistory.prototype.remove); // TODO listen to storage:remove event instead!
      };
      EditHistory.prototype.add = function(record){
        // <a class="list-group-item" href="http://mydmv/documents?id=${record[0]}">
        //   <h4 class="list-group-item-heading">${record[1]}</h4>
        //   <p class="list-group-item-text"><strong>Division</strong> ${record[2]}</p>
        //   <p class="list-group-item-text"><strong>File Type</strong> ${record[3]}</p>
        //   <p class="list-group-item-text"><strong>Business Area</strong> ${record[4]}</p>
        //   <p class="list-group-item-text"><strong>Category</strong> ${record[5]}</p>
        //   <p class="list-group-item-text"><strong>Subject</strong> ${record[6]}</p>
        // </a>
        
        this.$addList.append(`<a class="list-group-item" href="http://mydmv/documents?id=${record[0]}"> <h4 class="list-group-item-heading">${record[1]}</h4> <p class="list-group-item-text"><strong>Division</strong> ${record[2]}</p> <p class="list-group-item-text"><strong>File Type</strong> ${record[3]}</p> <p class="list-group-item-text"><strong>Business Area</strong> ${record[4]}</p> <p class="list-group-item-text"><strong>Category</strong> ${record[5]}</p> <p class="list-group-item-text"><strong>Subject</strong> ${record[6]}</p> </a>`);
      };
      EditHistory.prototype.remove = function(record){
        this.$delList.append(`
          <a class="list-group-item" href="http://mydmv/documents?id=${record[0]}">
            <h4 class="list-group-item-heading">${record[1]}</h4>
            <p class="list-group-item-text"><strong>Division</strong> ${record[2]}</p>
            <p class="list-group-item-text"><strong>File Type</strong> ${record[3]}</p>
            <p class="list-group-item-text"><strong>Business Area</strong> ${record[4]}</p>
            <p class="list-group-item-text"><strong>Category</strong> ${record[5]}</p>
            <p class="list-group-item-text"><strong>Subject</strong> ${record[6]}</p>
          </a>`);
      };
      
      // ===

      $(document).ready(function(evt) {
      // Setup the app components
        var App = {
          form: new EditForm('form#form-request'),
          table: new TableView('#table-all', 'button#button-delete'),
          storage: new Storage(),
          history: new EditHistory('.list-group#list-group-added', '.list-group#list-group-deleted'),
          replacePicker: new TableReplace('#table-replace', 'button#button-select'), 
          replaceForm: new FormReplace('form#form-replace')
        };
        _.extend(App, Backbone.Events);
        
        // Top-level listeners
        
        // Error handling
        App.listenTo(EventQueue, 'error:add', function(errorMsg){
          
        });
      });
